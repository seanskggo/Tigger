#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Error check: .tigger exists and index is not empty
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo "tigger-commit: error: tigger repository directory .tigger not found"
        exit 1
    fi
    if [ -z "$(ls -A .tigger/index)" ]
    then
        echo "nothing to commit"
        exit 1
    fi
}

# Get new commit number
get_new_commit_number () {
    count=0
    while true
    do 
        if [ ! -d ".tigger/$count" ] 
        then
            echo $count
            break
        fi
        count=$((count + 1))
    done
}

# Check if there are any current changes between given commit and index
# Exit with error message if so
# Usage: check_change_diff <commit>
check_commit_diff () {
    if [ $1 -ge 0 ]
    then 
        diff=$(diff -r .tigger/"$1" .tigger/index)
        if [ -z "$diff" ] 
        then 
            echo "nothing to commit"
            exit 1
        fi
    fi
}

# Given a commit number, commit the changes in tigger
# Usage: commit <commit> <message>
commit () {
    mkdir ".tigger/$1"
    for file in .tigger/index/*
    do 
        cp "$file" .tigger/"$1"
    done
    echo "$2" > .tigger/message/"$1"
    echo "Committed as commit $1"
}

# Add files to index (tigger-add functionality)
add_to_index () {
    for file in *
    do
        if [ ! -f "$file" ]
        then
            echo "tigger-commit: error: can not open '$file'"
            exit 1
        fi
        cp $file .tigger/index
    done
}

######################################################################
# Main
######################################################################

check_tigger

new_commit=$(get_new_commit_number)
old_commit=$((new_commit - 1))

# Case 1: tigger-commit -a -m <message>
if [ "$1" = "-a" ] && [ "$2" = "-m" ] && [ ! -z "$3" ]
then    
    add_to_index
    check_commit_diff "$old_commit"
    commit "$new_commit" "$2"
# Case 2: tigger-commit -m <message>
elif [ "$1" = "-m" ] && [ ! -z "$2" ]
then
    check_commit_diff "$old_commit"
    commit "$new_commit" "$2"
# Default - raise usage error
else 
    echo "usage: tigger-commit [-a] -m commit-message"
    exit 1
fi

