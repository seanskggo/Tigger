#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Check if file is in tigger index
check_file_in_index () {
    if [ ! -f .tigger/index/"$1" ]
    then
        echo "tigger-rm: error: '"$1"' is not in the tigger repository"
        exit 1
    fi
}

# Delete file from index and current repository
# Usage: delete <filename>    
full_delete () {
    for file
    do 
        check_file_in_index "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    done
}

# Delete file from tigger cache/index
# Usage: cache_delete <filename>
cache_delete () {
    for file
    do 
        check_file_in_index "$file"
        rm .tigger/index/"$file"
    done
}

# # Safety check for tigger-rm
# check () {
#     echo "tigger-rm: error: 'c' is not in the tigger repository"
#     echo "tigger-rm: error: 'c' has staged changes in the index"
# }

# Error check: .tigger exists
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo "tigger-rm: error: tigger repository directory .tigger not found"
        exit 1
    fi
}

######################################################################
# Main
######################################################################

# Error check
check_tigger

# Case 1: tigger-rm --force --cached filenames...
if [ "$1" = "--force" ] && [ "$2" = "--cached" ] && [ ! -z "$3" ]
then    
    shift 2
    cache_delete "$@"
# Case 2: tigger-rm --force filenames...
elif [ "$1" = "--force" ] && [ ! -z "$2" ]
then
    shift 1
    full_delete "$@"
# Case 3: tigger-rm --cached filenames...
elif [ "$1" = "--cached" ] && [ ! -z "$2" ]
then
    shift 1
    cache_delete "$@"
# Case 4: tigger-rm filenames...
else 
    echo ""
    # check "$@"
    # delete "$@"
fi
