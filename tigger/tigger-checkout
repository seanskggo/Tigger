#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Get last commit number if there is one otherwise return -1
# Usage: get_last_commit
get_last_commit () {
    last_commit=$(find .tigger/commits -maxdepth 1 -mindepth 1 | sed -E 's/.tigger\/commits\/(.*)/\1/g' | tr ' ' '\n' | sort | tail -n 1)
    if [ -z "$last_commit" ]
    then 
        echo "-1"
    else
        echo "$last_commit"
    fi
}

# Error check: .tigger exists and first commit exists. If it exists, 
# create master branch by default
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo "tigger-checkout: error: tigger repository directory .tigger not found"
        exit 1
    fi
    last_commit=$(get_last_commit)
    if [ "$last_commit" = -1 ]
    then    
        echo "tigger-checkout: error: this command can not be run until after the first commit"
        exit 1
    elif [ ! -d .tigger/branches ]
    then
        mkdir .tigger/branches
        mkdir .tigger/branches/master
        cp -r .tigger/index .tigger/branches/master/index
        rsync -Rr . .tigger/branches/master/files --exclude .tigger
        echo "master" > .tigger/current_branch
    fi
}

# Check if .tigger-checkout is valid from current branch
# usage check_branch <branch>
check_branch () {
    if [ "$(cat .tigger/current_branch)" = "$1" ]
    then 
        echo "Already on '$1'"
        exit 1
    elif [ ! -d .tigger/branches/"$1" ]
    then
        echo "tigger-checkout: error: unknown branch '$1'" 
        exit 1
    fi
}

# Change to specified branch
# Usage: change_branch <branch>
change_branch () {
    # Save state to current branch
    cp -r .tigger/index .tigger/branches/"$(cat .tigger/current_branch)"/index
    rsync -Rr . .tigger/branches/"$(cat .tigger/current_branch)"/files --exclude .tigger
    # Delete state
    rm -rf ./*
    # Load state from specified branch
    cp -r .tigger/branches/"$1"/index .tigger/index
    cp -r .tigger/branches/"$1"/files/* .
    echo "$1" > .tigger/current_branch
    echo "Switched to branch '$1'"
}

######################################################################
# Main
######################################################################

check_tigger

# Case 1: tigger-branch <branch>
if [ "$1" != "" ] && [ -z "$2" ]
then        
    check_branch "$1"
    change_branch "$1"
# Default: raise error
else 
    echo "usage: tigger-checkout <branch>"
fi
