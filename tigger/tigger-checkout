#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Get last commit number if there is one otherwise return -1
# Usage: get_last_commit
get_last_commit () {
    last_commit=$(find .tigger/commits -maxdepth 1 -mindepth 1 | sed -E 's/.tigger\/commits\/(.*)/\1/g' | tr ' ' '\n' | sort | tail -n 1)
    if [ -z "$last_commit" ]
    then 
        echo "-1"
    else
        echo "$last_commit"
    fi
}

# Error check: .tigger exists and first commit exists. If it exists, 
# create master branch by default
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo "tigger-checkout: error: tigger repository directory .tigger not found"
        exit 1
    fi
    last_commit=$(get_last_commit)
    if [ "$last_commit" = -1 ]
    then    
        echo "tigger-checkout: error: this command can not be run until after the first commit"
        exit 1
    fi
}

# Check if .tigger-checkout is valid from current branch
# usage check_branch <branch>
check_branch () {
    if [ "$(cat .tigger/current_branch)" = "$1" ]
    then 
        echo "Already on '$1'"
        exit 1
    elif [ ! -d .tigger/branches/"$1" ]
    then
        echo "tigger-checkout: error: unknown branch '$1'" 
        exit 1
    fi
}

# Retrieves the last commit of the specified branch
# Usage: get_last_commit_of_branch <branch>
get_last_commit_of_branch () {
    log=$(cat .tigger/branches/"$1"/log)
    echo "$log" | tail -n 1
}

# Change to specified branch
# Usage: change_branch <branch>
change_branch () {

    last_commit_branch=$(get_last_commit_of_branch "$1")
    last_commit_curr=$(get_last_commit)

    if [ "$(diff -r .tigger/commits/"$last_commit_curr" .tigger/index | grep -v '^Only in')" = "" ]
    then 
        BRANCH=1
    else
        BRANCH=0
    fi

    if [ "$(diff -r .tigger/commits/"$last_commit_curr" . | grep -v '^Only in')" = "" ]
    then 
        CURR=1
    else
        CURR=0
    fi

    if [ "$BRANCH" = 1 ] && [ "$CURR" = 1 ]
    then 
        rm -rf ./*
    fi

    for file in .tigger/commits/"$last_commit_branch"/*
    do 
        if [ -f "$file" ]
        then 
            cp "$file" .tigger/index
            cp "$file" .
        fi
    done

    echo "$1" > .tigger/current_branch
    echo "Switched to branch '$1'"

}

######################################################################
# Main
######################################################################

check_tigger

# Case 1: tigger-branch <branch>
if [ "$1" != "" ] && [ -z "$2" ]
then        
    check_branch "$1"
    change_branch "$1"
# Default: raise error
else 
    echo "usage: tigger-checkout <branch>"
fi

