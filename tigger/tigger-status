#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Print to stderr
# Usage: echo_err <message>
echo_err() { 
    echo "$@" 1>&2
}

# Error check: .tigger exists 
# Usage: check_tigger
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo_err "tigger-status: error: tigger repository directory .tigger not found"
        exit 1
    fi
}

# Get last commit number if there is one otherwise return -1
# Usage: get_last_commit
get_last_commit () {
    last_commit=$(ls .tigger/commits | tr ' ' '\n' | tail -n 1)
    if [ -z "$last_commit" ]
    then 
        echo "-1"
    else
        echo "$last_commit"
    fi
}

# Return sorted comma separated list of unique files in index, repository 
# and current directory (simulate hash table using regex check)
# Usage: get_new_commit 
get_unique_files () {
    str=""
    # Repository
    last_commit=$(get_last_commit)
    if [ ! "$last_commit" -eq -1 ] 
    then
        for file in .tigger/commits/"$last_commit"/*
        do 
            if [ -f "$file" ]
            then
                file=$(echo "$file" | sed -E 's/.tigger\/.*\/(.*)/\1/')
                str="$str-#$file#-"
            fi
        done
    fi
    # Index
    for file in .tigger/index/*
    do 
        if [ -f "$file" ]
        then
            file=$(echo "$file" | sed -E 's/.tigger\/.*\/(.*)/\1/')
            find=$(echo "$str" | sed -nE "/\-#$file#\-/p")
            if [ -z "$find" ]
            then 
                str="$str-#$file#-"
            fi
        fi
    done
    # Current Directory
    for file in *
    do 
        if [ -f "$file" ]
        then
            find=$(echo "$str" | sed -nE "/\-#$file#\-/p")
            if [ -z "$find" ]
            then 
                str="$str-#$file#-"
            fi
        fi
    done
    echo "$str" | sed -E 's/#\-+#/,/g' | sed -E 's/(\-#|#\-)//g' | sed -E $'s/,/\n/g' | sort | tr '\n' ',' | sed 's/.$//'
}

# Given comma separated list of files, print status for each file in order
# Usage: print_status <comma list>
print_status () {
    for file in $(echo "$1" | sed "s/,/ /g")
    do

        last_commit=$(get_last_commit)

        if [ -f "$file" ]
        then 
            DIR=$(cat "$file")
        else
            DIR=0
        fi
        
        if [ -f .tigger/index/"$file" ]
        then 
            INDEX=$(cat .tigger/index/"$file")
        else
            INDEX=0
        fi

        if [ ! "$last_commit" -eq -1 ] && [ -f .tigger/commits/"$last_commit"/"$file" ]
        then 
            COMMIT=$(cat .tigger/commits/"$last_commit"/"$file")
        else
            COMMIT=0
        fi

        # Case 1: dir, index and commit all exists
        if [ "$DIR" != 0 ] && [ "$INDEX" != 0 ] && [ "$COMMIT" != 0 ]
        then
            if [ "$DIR" = "$INDEX" ] && [ "$INDEX" = "$COMMIT" ]
            then 
                echo "$file - same as repo"
            elif [ "$DIR" != "$INDEX" ] && [ "$INDEX" = "$COMMIT" ]
            then 
                echo "$file - file changed, changes not staged for commit"
            elif [ "$DIR" = "$INDEX" ] && [ "$INDEX" != "$COMMIT" ]
            then 
                echo "$file - file changed, changes staged for commit"
            else
                echo "$file - file changed, different changes staged for commit"
            fi
        # Case 2: dir and index exists
        elif [ "$DIR" != 0 ] && [ "$INDEX" != 0 ] && [ "$COMMIT" = 0 ]
        then
            if [ "$DIR" = "$INDEX" ]
            then 
                echo "$file - added to index"
            else    
                echo "$file - added to index, file changed"
            fi
        # Case 3: dir and commit exists
        elif [ "$DIR" != 0 ] && [ "$INDEX" = 0 ] && [ "$COMMIT" != 0 ]
        then
            if [ "$DIR" = "$COMMIT" ]
            then 
                echo "$file - untracked"
            else
                echo "$file - untracked"
            fi
        # Case 4: index and commit exists
        elif [ "$DIR" = 0 ] && [ "$INDEX" != 0 ] && [ "$COMMIT" != 0 ]
        then
            if [ "$INDEX" = "$COMMIT" ]
            then 
                echo "$file - file deleted"
            else
                echo "$file - file deleted, different changes staged for commit"
            fi
        # Case 5: dir exists
        elif [ "$DIR" != 0 ] && [ "$INDEX" = 0 ] && [ "$COMMIT" = 0 ]
        then
            echo "$file - untracked"
        # Case 6: index exists
        elif [ "$DIR" = 0 ] && [ "$INDEX" != 0 ] && [ "$COMMIT" = 0 ]
        then
            echo "$file - added to index, file deleted"
        # Case 7: commit exists
        elif [ "$DIR" = 0 ] && [ "$INDEX" = 0 ] && [ "$COMMIT" != 0 ]
        then
            echo "$file - deleted"
        # Case 8: none exists => this case is not possible
        else
            :
        fi
    done
}

######################################################################
# Main
######################################################################

check_tigger

# Case 1: tigger-init
if [ -z "$1" ]
then    
    list=$(get_unique_files)
    print_status "$list"
# Default - raise usage error
else 
    echo_err "usage: tigger-status"
    exit 1
fi

