#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Print to stderr
# Usage: echo_err <message>
echo_err() { 
    echo "$@" 1>&2
}

# Error check: .tigger exists
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo_err "tigger-rm: error: tigger repository directory .tigger not found"
        exit 1
    fi
}

# Get last commit number if there is one otherwise return -1
# Usage: get_last_commit
get_last_commit () {
    last_commit=$(ls .tigger/commits | tr ' ' '\n' | tail -n 1)
    if [ -z "$last_commit" ]
    then 
        echo "-1"
    else
        echo "$last_commit"
    fi
}

# Check if file is in tigger index
# Usage: check_file_in_index <filename>
check_file_in_index () {
    if [ ! -f .tigger/index/"$1" ]
    then
        echo_err "tigger-rm: error: '"$1"' is not in the tigger repository"
        exit 1
    fi
}

# Throws usage error if given variable is empty
# Usage: throw_usage_error_if_empty <arg>
throw_usage_error_if_empty () {
    if [ -z "$1" ]
    then 
        echo_err "usage: tigger-rm [--force] [--cached] <filenames>"
        exit 1
    fi 
}

# Throw error if there is any staging differences
# Usage: check_if_staged <filename>
check_if_staged () {

    commit=$(get_last_commit)

    # If there are no commits, immediately throw error
    if [ "$commit" -eq -1 ] || [ ! -f .tigger/commits/"$commit"/"$1" ]
    then 
        echo_err "tigger-rm: error: '"$1"' has staged changes in the index"
        exit 1
    else
        COMMIT_FILE=".tigger/commits/"$commit"/"$1""
        INDEX_FILE=".tigger/index/"$1""
        DIR_FILE="$1"
        # Case 1: file in index, commit and dir all different
        if [ ! -z $(diff "$COMMIT_FILE" "$INDEX_FILE") ] && [ ! -z $(diff "$COMMIT_FILE" "$DIR_FILE") ] && [ ! -z $(diff "$INDEX_FILE" "$DIR_FILE") ]
        then
            echo_err "tigger-rm: error: '"$1"' in index is different to both the working file and the repository"
            exit 1
        # Case 2: file in commit and dir different
        elif [ ! -z $(diff "$COMMIT_FILE" "$DIR_FILE") ]
        then 
            echo_err "tigger-rm: error: '"$1"' in the repository is different to the working file"
            exit 1
        # Case 3: file in index and dir different
        elif [ ! -z $(diff "$INDEX_FILE" "$DIR_FILE") ]
        then 
            echo "tigger-rm: error: '"$1"' has staged changes in the index"
            echo_err 1
        # Case 4: file in index and commit different
        elif [ ! -z $(diff "$INDEX_FILE" "$COMMIT_FILE") ]
        then 
            echo "tigger-rm: error: '"$1"' has staged changes in the index"
            echo_err 1
        # Case 5: file all the same => do not raise error
        fi
    fi
}

# Throw error if there is any staging differences in cache
# Usage: check_if_staged_cached <filename>
check_if_staged_cached () {
    # added, committed, changed, added, changed - tigger-rm: error: 'file' in index is different to both the working file and the repository
    if [ -f .tigger/last_commit ] && [ -f .tigger/$(cat .tigger/last_commit)/"$1" ] && [ -f "$1" ] && [ -f .tigger/index/"$1" ] && [ ! -z "$(diff "$1" .tigger/index/"$1")" ] && [ ! -z "$(diff .tigger/index/"$1" .tigger/$(cat .tigger/last_commit)/"$1")" ]
    then
        echo "tigger-rm: error: '"$1"' in index is different to both the working file and the repository"
        exit 1
    # added - tigger-rm: error: 'file' has staged changes in the index
    elif [ ! -f "$1" ]
    then 
        echo "tigger-rm: error: '"$1"' has staged changes in the index"
        exit 1
    fi
}

######################################################################
# Main
######################################################################

##########################
# Error Check & Preamble #
##########################

# .tigger check
check_tigger

# If first argument is empty, throw usage error
throw_usage_error_if_empty "$1"

# Shift arguments and usage error check
if [ "$1" = "--force" ] && [ "$2" = "--cached" ]
then    
    throw_usage_error_if_empty "$3"
    shift 2
elif [ "$1" = "--force" ]
then
    throw_usage_error_if_empty "$2"
    shift 1
elif [ "$1" = "--cached" ]
then
    throw_usage_error_if_empty "$2"
    shift 1
fi

################
# Remove Files #
################

for file in "$@"
do 
    # Case 1: tigger-rm --force --cached filenames...
    if [ "$1" = "--force" ] && [ "$2" = "--cached" ]
    then    
        check_file_in_index "$file"
        rm .tigger/index/"$file"
    # Case 2: tigger-rm --force filenames...
    elif [ "$1" = "--force" ]
    then
        check_file_in_index "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    # Case 3: tigger-rm --cached filenames...
    elif [ "$1" = "--cached" ]
    then
        check_file_in_index "$file"
        check_if_staged_cached "$file"
        rm .tigger/index/"$file"
    # Case 4: tigger-rm filenames...
    else 
        check_file_in_index "$file" 
        check_if_staged "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    fi
done
