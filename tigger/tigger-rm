#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Print to stderr
# Usage: echo_err <message>
echo_err() { 
    echo "$@" 1>&2
}

# Error check: .tigger exists
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo_err "tigger-rm: error: tigger repository directory .tigger not found"
        exit 1
    fi
}

# Check if file is in tigger index
check_file_in_index () {
    if [ ! -f .tigger/index/"$1" ]
    then
        echo_err "tigger-rm: error: '"$1"' is not in the tigger repository"
        exit 1
    fi
}

# Throw error if there is any staging differences
# Usage: check_if_staged <filename>
check_if_staged () {
    # added, committed, changed - tigger-rm: error: 'file' in the repository is different to the working file
    if [ -f .tigger/last_commit ] && [ -f .tigger/$(cat .tigger/last_commit)/"$1" ] && [ -f "$1" ] && [ -f .tigger/index/"$1" ] && [ ! -z "$(diff "$1" .tigger/index/"$1")" ] && [ -z "$(diff .tigger/index/"$1" .tigger/$(cat .tigger/last_commit)/"$1")" ]
    then
        echo "tigger-rm: error: '"$1"' in the repository is different to the working file"
        exit 1
    # added, committed, changed, added, changed - tigger-rm: error: 'file' in index is different to both the working file and the repository
    elif [ -f .tigger/last_commit ] && [ -f .tigger/$(cat .tigger/last_commit)/"$1" ] && [ -f "$1" ] && [ -f .tigger/index/"$1" ] && [ ! -z "$(diff "$1" .tigger/index/"$1")" ] && [ ! -z "$(diff .tigger/index/"$1" .tigger/$(cat .tigger/last_commit)/"$1")" ]
    then
        echo "tigger-rm: error: '"$1"' in index is different to both the working file and the repository"
        exit 1
    # added, committed, changed - "tigger-rm: error: 'file' has staged changes in the index
    elif [ -f .tigger/last_commit ] && [ -f .tigger/$(cat .tigger/last_commit)/"$1" ] && [ -f "$1" ] && [ -f .tigger/index/"$1" ] && [ -z "$(diff "$1" .tigger/index/"$1")" ] && [ ! -z "$(diff .tigger/index/"$1" .tigger/$(cat .tigger/last_commit)/"$1")" ]
    then
        echo "tigger-rm: error: '"$1"' has staged changes in the index"
        exit 1
    # added - tigger-rm: error: 'file' has staged changes in the index
    elif [ ! -f .tigger/last_commit ] || [ ! -f .tigger/$(cat .tigger/last_commit)/"$1" ]
    then 
        echo "tigger-rm: error: '"$1"' has staged changes in the index"
        exit 1
    fi
}

# Throw error if there is any staging differences in cache
# Usage: check_if_staged_cached <filename>
check_if_staged_cached () {
    # added, committed, changed, added, changed - tigger-rm: error: 'file' in index is different to both the working file and the repository
    if [ -f .tigger/last_commit ] && [ -f .tigger/$(cat .tigger/last_commit)/"$1" ] && [ -f "$1" ] && [ -f .tigger/index/"$1" ] && [ ! -z "$(diff "$1" .tigger/index/"$1")" ] && [ ! -z "$(diff .tigger/index/"$1" .tigger/$(cat .tigger/last_commit)/"$1")" ]
    then
        echo "tigger-rm: error: '"$1"' in index is different to both the working file and the repository"
        exit 1
    # added - tigger-rm: error: 'file' has staged changes in the index
    elif [ ! -f "$1" ]
    then 
        echo "tigger-rm: error: '"$1"' has staged changes in the index"
        exit 1
    fi
}

# Delete file from index and current repository
# Usage: full_delete <filenames...>    
full_delete () {
    for file
    do 
        check_file_in_index "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    done
}

# Delete file from tigger cache/index
# Usage: cache_delete <filenames...>
cache_delete () {
    for file
    do 
        check_file_in_index "$file"
        rm .tigger/index/"$file"
    done
}

# Delete file from tigger cache/index safely
# Usage: safe_cache_delete <filenames...>
safe_cache_delete () {
    for file
    do 
        check_file_in_index "$file"
        check_if_staged_cached "$file"
        rm .tigger/index/"$file"
    done
}


# Delete file from index and current repository with safety check
# Usage: safe_delete <filenames...>    
safe_delete () {
    for file
    do 
        check_file_in_index "$file" 
        check_if_staged "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    done
}

######################################################################
# Main
######################################################################

# Error check
check_tigger

# Case 1: tigger-rm --force --cached filenames...
if [ "$1" = "--force" ] && [ "$2" = "--cached" ]
then    
    if [ ! -z "$3" ]
    then 
        shift 2
        cache_delete "$@"
    else 
        echo_err "usage: tigger-rm [--force] [--cached] <filenames>"
        exit 1
    fi 
# Case 2: tigger-rm --force filenames...
elif [ "$1" = "--force" ]
then
    if [ ! -z "$2" ]
    then 
        shift 1
        full_delete "$@"
    else
        echo_err "usage: tigger-rm [--force] [--cached] <filenames>"
        exit 1
    fi
# Case 3: tigger-rm --cached filenames...
elif [ "$1" = "--cached" ]
then
    if [ ! -z "$2" ]
    then
        shift 1
        safe_cache_delete "$@"
    else
        echo_err "usage: tigger-rm [--force] [--cached] <filenames>"
        exit 1
    fi
# Case 4: tigger-rm 
elif [ -z "$1" ]
then 
    echo_err "usage: tigger-rm [--force] [--cached] <filenames>"
    exit 1
# Case 5: tigger-rm filenames...
else 
    safe_delete "$@"
fi
