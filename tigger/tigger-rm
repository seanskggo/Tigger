#!/bin/dash

######################################################################
# Helper Functions
######################################################################

# Print to stderr
# Usage: echo_err <message>
echo_err() { 
    echo "$@" 1>&2
}

# Error check: .tigger exists
check_tigger () {
    if [ ! -d ".tigger" ]
    then
        echo_err "tigger-rm: error: tigger repository directory .tigger not found"
        exit 1
    fi
}

# Get last commit number if there is one otherwise return -1
# Usage: get_last_commit
get_last_commit () {
    last_commit=$(find .tigger/commits -maxdepth 1 -mindepth 1 | sed -E 's/.tigger\/commits\/(.*)/\1/g' | tr ' ' '\n' | sort | tail -n 1)
    if [ -z "$last_commit" ]
    then 
        echo "-1"
    else
        echo "$last_commit"
    fi
}

# Check if file is in tigger index
# Usage: check_file_in_index <filename>
check_file_in_index () {
    if [ ! -f .tigger/index/"$1" ]
    then
        echo_err "tigger-rm: error: '$1' is not in the tigger repository"
        exit 1
    fi
}

# Throws usage error if given variable is empty
# Usage: throw_usage_error_if_empty <arg>
throw_usage_error_if_empty () {
    if [ -z "$1" ]
    then 
        echo_err "usage: tigger-rm [--force] [--cached] <filenames>"
        exit 1
    fi 
}

# Throw error if there is any staging differences
# Usage: check_if_staged <filename>
check_if_staged () {

    commit=$(get_last_commit)

    # If file does not exist, pass check
    if [ ! -f "$1" ]
    then
        return 
    fi

    INDEX_FILE="$(cat .tigger/index/"$1")"
    DIR_FILE="$(cat "$1")"

    # If there are no commits, immediately throw error
    if [ "$commit" -eq -1 ] || [ ! -f .tigger/commits/"$commit"/"$1" ]
    then 
        if [ "$INDEX_FILE" != "$DIR_FILE" ]
        then
            echo_err "tigger-rm: error: '$1' in index is different to both the working file and the repository"
            exit 1
        else 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        fi
    else
        COMMIT_FILE="$(cat .tigger/commits/"$commit"/"$1")"
        # Case 1: all files different
        if [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ]
        then
            echo_err "tigger-rm: error: '$1' in index is different to both the working file and the repository"
            exit 1
        # Case 2: only commit and index file different. In theory, this case is NOT possible but we will throw error for good measure
        elif [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" = "$DIR_FILE" ] && [ "$INDEX_FILE" = "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        # Case 3: file in commit different to others
        elif [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" = "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        # Case 4: only commit and dir file different. This case is not possible
        elif [ "$COMMIT_FILE" = "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" = "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        # Case 5: dir file is different to others
        elif [ "$COMMIT_FILE" = "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' in the repository is different to the working file"
            exit 1
        # Case 6: only file in index and dir different. Not possible
        elif [ "$COMMIT_FILE" = "$INDEX_FILE" ] && [ "$COMMIT_FILE" = "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        # Case 7: index file is different to others
        elif [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" = "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        # Case 8: all files are the same => check passed
        else
            :
        fi
    fi
}

# Throw error if there is any staging differences in cache
# Usage: check_if_staged_cached <filename>
check_if_staged_cached () {

    commit=$(get_last_commit)

    # If file does not exist, pass check
    if [ ! -f "$1" ]
    then
        return 
    fi

    INDEX_FILE="$(cat .tigger/index/"$1")"
    DIR_FILE="$(cat "$1")"

    # If there are no commits, pass check
    if [ "$commit" -eq -1 ] || [ ! -f .tigger/commits/"$commit"/"$1" ]
    then 
        if [ "$INDEX_FILE" != "$DIR_FILE" ]
        then
            echo_err "tigger-rm: error: '$1' in index is different to both the working file and the repository"
            exit 1
        fi
    else
        COMMIT_FILE="$(cat .tigger/commits/"$commit"/"$1")"
        # Case 1: all files different
        if [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ]
        then
            echo_err "tigger-rm: error: '$1' in index is different to both the working file and the repository"
            exit 1
        # Case 2: file in commit different to others
        elif [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" = "$DIR_FILE" ] 
        then 
            :
        # Case 3: dir file is different to others
        elif [ "$COMMIT_FILE" = "$INDEX_FILE" ] && [ "$COMMIT_FILE" != "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ] 
        then 
            :
        # Case 4: index file is different to others
        elif [ "$COMMIT_FILE" != "$INDEX_FILE" ] && [ "$COMMIT_FILE" = "$DIR_FILE" ] && [ "$INDEX_FILE" != "$DIR_FILE" ] 
        then 
            echo_err "tigger-rm: error: '$1' has staged changes in the index"
            exit 1
        # Case 5: all files are the same => check passed
        else
            :
        fi
    fi
}

######################################################################
# Main
######################################################################

# .tigger check
check_tigger

# If first argument is empty, throw usage error
throw_usage_error_if_empty "$1"

# Case 1: tigger-rm --force --cached filenames...
if [ "$1" = "--force" ] && [ "$2" = "--cached" ]
then    
    throw_usage_error_if_empty "$3"
    shift 2
    for file in "$@"
    do  
        check_file_in_index "$file"
        rm .tigger/index/"$file"
    done
# Case 2: tigger-rm --force filenames...
elif [ "$1" = "--force" ]
then
    throw_usage_error_if_empty "$2"
    shift 1
    for file in "$@"
    do  
        check_file_in_index "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    done
# Case 3: tigger-rm --cached filenames...
elif [ "$1" = "--cached" ]
then
    throw_usage_error_if_empty "$2"
    shift 1
    for file in "$@"
    do  
        check_file_in_index "$file"
        check_if_staged_cached "$file"
        if [ -f .tigger/index/"$file" ]
        then
            rm .tigger/index/"$file"
        fi
    done
# Case 4: tigger-rm filenames...
else 
    for file in "$@"
    do  
        check_file_in_index "$file" 
        check_if_staged "$file"
        rm .tigger/index/"$file"
        if [ -f "$file" ]
        then
            rm "$file"
        fi
    done
fi
